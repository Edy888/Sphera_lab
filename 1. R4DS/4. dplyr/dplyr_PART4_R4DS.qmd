---
title: "dplyr"
author: "Edy888"
format: 
  html:
    toc: true
    toc_float: true
  pdf: default
  docx: default
---

# **4. Data Transformation_dplyr\_(R4DS_глава 4)**

<https://r4ds.hadley.nz/data-transform>

```{r load packages, message=FALSE}
library(tidyverse)
library(nycflights13)
flights <- flights
```

Для отображения всех столбцов можно использовать: `glimpse(flights)`

Глаголы dplyr организованы в четыре группы в зависимости от того, с чем они работают: с **строками**, **столбцами**, **группами** или **таблицами**. В следующих разделах вы узнаете наиболее важные глаголы для строк, столбцов и групп, затем мы вернемся к глаголам объединения, которые работают с таблицами в [главе 20](https://r4ds.hadley.nz/joins). Давайте углубимся!

### **4.2 Строки**

Наиболее важными глаголами, которые работают со строками набора данных, являются [`filter()`](https://dplyr.tidyverse.org/reference/filter.html), которые изменяют, какие строки присутствуют, без изменения их порядка, и [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html), которые изменяют порядок строк, не изменяя, какие из них присутствуют. Обе функции влияют только на строки, а столбцы остаются неизменными. Мы также обсудим, [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) которая находит строки с уникальными значениями, но непохожими [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) и [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) она также может при необходимости изменять столбцы.

### **4.2.1`filter()`**

[`filter()`](https://dplyr.tidyverse.org/reference/filter.html) позволяет сохранять строки на основе значений столбцов. Первый аргумент - это фрейм данных. Второй и последующие аргументы - это условия, которые должны быть истинными для сохранения строки. Например, мы могли бы найти все рейсы, которые вылетели с опозданием более чем на 120 минут (два часа):

```{r}
flights %>%  
  filter(dep_delay > 120)
```

При объединении есть полезный ярлык `|` и `==`: `%in%`. Он сохраняет строки, в которых переменная равна одному из значений справа:

```{r}
flights |> 
  filter(month %in% c(1, 2))
```

#### **Распространенные ошибки при использовании `filter()`**

1.  Когда вы начинаете с R, самая простая ошибка, которую можно совершить, - использовать `=` вместо `==` при проверке на равенство

2.  Еще одна ошибка заключается в том, что вы пишете утверждения типа "или", как вы бы делали на английском:

```{r}
flights |> 
  filter(month == 1 | 2)
```

Это "работает" в том смысле, что не выдает ошибку, но и не делает того, что вы хотите, потому что \| сначала проверяется условие month == 1, а затем проверяется условие 2, которое проверять нецелесообразно. Мы узнаем больше о том, что здесь происходит и почему, в разделе 16.6.2.

```{r}
flights |> 
  filter(month == 1 | month == 2)
```

### **4.2.2`arrange()`**

[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) изменяет порядок строк на основе значений столбцов. Для упорядочивания требуется фрейм данных и набор имен столбцов (или более сложных выражений). Если вы укажете более одного имени столбца, каждый дополнительный столбец будет использоваться для разрыва связей в значениях предыдущих столбцов. Например, следующий код сортируется по времени отправки, которое распределено по четырем столбцам. Сначала мы получаем самые ранние годы, затем в течение года - самые ранние месяцы и т.д.

```{r}
flights |> 
  arrange(year, month, day, dep_time)
```

Вы можете использовать [`desc()`](https://dplyr.tidyverse.org/reference/desc.html) для столбца внутри [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html), чтобы изменить порядок фрейма данных на основе этого столбца в порядке убывания (от большого к малому). Например, этот код упорядочивает рейсы с наибольшей задержкой на наименьшую:

```{r}
flights |> 
  arrange(desc(dep_delay))
```

### **4.2.3`distinct()`**

[`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) находит все уникальные строки в наборе данных, поэтому в техническом смысле он в основном работает со строками. Однако в большинстве случаев вам потребуется различная комбинация некоторых переменных, поэтому вы также можете дополнительно указать имена столбцов:

```{r}
# Remove duplicate rows, if any
flights |> 
  distinct()

# Find all unique origin and destination pairs
flights |> 
  distinct(origin, dest)
```

В качестве альтернативы, если вы хотите сохранить другие столбцы при фильтрации по уникальным строкам, вы можете использовать `.keep_all = TRUE` опцию.

```{r}
flights |> 
  distinct(origin, dest, .keep_all = TRUE)
```

Не случайно, что все эти отдельные рейсы выполняются 1 января: [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) найдет первое вхождение уникальной строки в наборе данных и отбросит остальные.

Если вы хотите вместо этого найти количество вхождений, вам лучше поменять местами [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) на [`count()`](https://dplyr.tidyverse.org/reference/count.html), и с `sort = TRUE` аргументом вы можете расположить их в порядке убывания количества вхождений. Вы узнаете больше о count в [разделе 14.3](https://r4ds.hadley.nz/numbers#sec-counts).

```{r}
flights |>
  count(origin, dest, sort = TRUE)
```

### **Упражнения**

1.  В одном конвейере для каждого условия найдите все рейсы, которые соответствуют условию:

    -   Произошла задержка прибытия на два или более часа

    -   Вылетел в Хьюстон (`IAH` или `HOU`)

    -   Управлялись United, American или Delta

    -   Отбыл летом (июль, август и сентябрь)

    -   Прибыл с опозданием более чем на два часа, но не ушел поздно

    -   Были отложены как минимум на час, но составили более 30 минут в полете

2.  Сортировка `flights` для поиска рейсов с наибольшими задержками вылета. Найдите рейсы, которые вылетали самым ранним утром.

3.  Сортировка `flights` для поиска самых быстрых рейсов. (Подсказка: попробуйте включить математические вычисления внутри вашей функции.)

4.  Был ли рейс в каждый день 2013 года?

5.  На каких рейсах было пройдено наибольшее расстояние? На каких пройдено наименьшее расстояние?

6.  Имеет ли значение, какой порядок вы использовали [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) и [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) используете ли вы оба? Почему / почему бы и нет? Подумайте о результатах и о том, сколько работы пришлось бы выполнять функциям.

    1.  In a single pipeline for each condition, find all flights that meet the condition:

        -   Had an arrival delay of two or more hours

        -   Flew to Houston (`IAH` or `HOU`)

        -   Were operated by United, American, or Delta

        -   Departed in summer (July, August, and September)

        -   Arrived more than two hours late, but didn't leave late

        -   Were delayed by at least an hour, but made up over 30 minutes in flight

```{r}
flights %>% 
filter(arr_delay >= 2 & dest %in% c('IAH','HOU'))
```

```         
2.  Sort `flights` to find the flights with longest departure delays. Find the flights that left earliest in the morning.

3.  Sort `flights` to find the fastest flights. (Hint: Try including a math calculation inside of your function.)

4.  Was there a flight on every day of 2013?

5.  Which flights traveled the farthest distance? Which traveled the least distance?

6.  Does it matter what order you used
```

## **4.3 Столбцы**

Есть четыре важных глагола, которые влияют на столбцы без изменения строк: [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) создает новые столбцы, производные от существующих столбцов, [`select()`](https://dplyr.tidyverse.org/reference/select.html) изменяет, какие столбцы присутствуют, [`rename()`](https://dplyr.tidyverse.org/reference/rename.html) изменяет названия столбцов и [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html) изменяет позиции столбцов.

### **4.3.1 `mutate()`**

Задача [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) заключается в добавлении новых столбцов, которые вычисляются на основе существующих столбцов. В главах о преобразовании вы познакомитесь с большим набором функций, которые можно использовать для управления различными типами переменных. На данный момент мы будем придерживаться базовой алгебры, которая позволяет нам вычислять `gain`, сколько времени задержанный рейс провел в воздухе, и `speed` в милях в час:

```{r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60)
```

По умолчанию [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) добавляются новые столбцы в правой части вашего набора данных, что затрудняет понимание того, что здесь происходит. Вместо этого мы можем использовать `.before` аргумент для добавления переменных в левую часть:

```{r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .before = 1
  )
```

`.` Это знак, который `.before` является аргументом функции, а не именем третьей новой переменной, которую мы создаем. Вы также можете использовать `.after` для добавления после переменной, и в обоих `.before` и `.after` вы можете использовать имя переменной вместо позиции. Например, мы могли бы добавить новые переменные после `day`:

```{r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .after = day
  )
```

В качестве альтернативы вы можете управлять тем, какие переменные сохраняются с помощью `.keep` аргумента. Особенно полезным аргументом является тот, `"used"` который указывает, что мы сохраняем только столбцы, которые были задействованы или созданы на [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) шаге. Например, следующий вывод будет содержать только переменные `dep_delay`, `arr_delay`, `air_time` `gain`, `hours` `gain_per_hour`, и,,,.

```{r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    hours = air_time / 60,
    gain_per_hour = gain / hours,
    .keep = "used"
  )
```

Обратите внимание, что, поскольку мы не присвоили результат вышеуказанного вычисления обратно `flights`, новые переменные `gain,` `hours`, и `gain_per_hour` будут только напечатаны, но не будут сохранены во фрейме данных. И если мы хотим, чтобы они были доступны во фрейме данных для будущего использования, нам следует тщательно подумать о том, хотим ли мы, чтобы результат был присвоен обратно `flights`, перезаписав исходный фрейм данных большим количеством переменных, или новому объекту. Часто правильным ответом является новый объект, который назван информативно, чтобы указать на его содержимое, например, `delay_gain`, но у вас также могут быть веские причины для перезаписи `flights`.

### **4.3.2 `select()`**

Нередко можно получить наборы данных с сотнями или даже тысячами переменных. В этой ситуации первая проблема часто заключается в том, чтобы просто сосредоточиться на интересующих вас переменных. [`select()`](https://dplyr.tidyverse.org/reference/select.html) позволяет быстро увеличить полезное подмножество, используя операции, основанные на именах переменных:

-   Выберите столбцы по имени:

```{r}
flights |> 
  select(year, month, day)
```

-   Выберите все столбцы между годом и днем (включительно):

```{r}
flights |> 
  select(year:day)
```

-   Выберите все столбцы, кроме столбцов от года до дня (включительно):

```{r}
flights |> 
  select(!year:day)
```

Вы также можете использовать `-` вместо `!` (и вы, вероятно, увидите это в дикой природе); мы рекомендуем `!`, потому что это читается как "не" и хорошо сочетается с `&` и `|`.

-   Выберите все столбцы, которые являются символами:

```{r}
flights |> 
  select(where(is.character))
```

Существует ряд вспомогательных функций, которые вы можете использовать в [`select()`](https://dplyr.tidyverse.org/reference/select.html):

-   `starts_with("abc")`: сопоставляет имена, начинающиеся с "abc".

-   `ends_with("xyz")`: сопоставляет имена, заканчивающиеся на "xyz".

-   `contains("ijk")`: сопоставляет имена, содержащие "ijk".

-   `num_range("x", 1:3)`: совпадения `x1`, `x2` и `x3`.

Подробнее см. [`?select`](https://dplyr.tidyverse.org/reference/select.html). Как только вы освоите регулярные выражения (тема [главы 16](https://r4ds.hadley.nz/regexps)), вы также сможете использовать их [`matches()`](https://tidyselect.r-lib.org/reference/starts_with.html) для выбора переменных, соответствующих шаблону.

Вы можете переименовывать переменные по своему [`select()`](https://dplyr.tidyverse.org/reference/select.html) усмотрению, используя `=`. Новое имя отображается в левой части `=`, а старая переменная - в правой части:

```{r}
flights |> 
  select(tail_num = tailnum)
```

### **4.3.3 `rename()`**

Если вы хотите сохранить все существующие переменные и просто хотите переименовать несколько, вы можете использовать [`rename()`](https://dplyr.tidyverse.org/reference/rename.html) вместо [`select()`](https://dplyr.tidyverse.org/reference/select.html):

```{r}
flights |> 
  rename(tail_num = tailnum)
```

Если у вас есть куча столбцов с непоследовательными именами, и было бы больно исправлять их все вручную, ознакомьтесь с [`janitor::clean_names()`](https://sfirke.github.io/janitor/reference/clean_names.html), который обеспечивает некоторую полезную автоматическую очистку.

### **4.3.4 `relocate()`**

Используется [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html) для перемещения переменных. Возможно, вам захочется собрать связанные переменные вместе или переместить важные переменные вперед. По умолчанию [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.html) переменные перемещаются вперед:

```{r}
flights |> 
  relocate(time_hour, air_time)
```

Вы также можете указать, куда их поместить, используя аргументы `.before` и `.after`, точно так же, как в [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html):

```{r}
flights |> 
  relocate(year:dep_time, .after = time_hour)
flights |> 
  relocate(starts_with("arr"), .before = dep_time)
```

### **4.3.5 Упражнения**

1.  Сравните `dep_time(время отправления)`, `sched_dep_time(заплан. время отправления)` и `dep_delay(задержка вылета)`. Как бы вы ожидали, что эти три числа будут связаны?

    ```{r}
    select_flights <- flights %>% 
      select(dep_time, sched_dep_time, dep_delay)

    select_flights %>% ggplot(aes(x = dep_time, y = dep_delay))+
      geom_point(na.rm = TRUE)
    ```

2.  Проведите мозговой штурм как можно большим количеством способов выбора `dep_time`, `dep_delay` `arr_time` и `arr_delay` из `flights`.

3.  Что произойдет, если вы укажете имя одной и той же переменной несколько раз в [`select()`](https://dplyr.tidyverse.org/reference/select.html) вызове?

    ```{r}
    flights %>% select(dep_delay, dep_delay)
    ```

4.  Что делает [`any_of()`](https://tidyselect.r-lib.org/reference/all_of.html) функция? Почему она может быть полезна в сочетании с этим вектором?

    ```{r}
    variables <- c("year", "month", "day", "dep_delay", "arr_delay")
    variables
    ```

5.  Удивляет ли вас результат выполнения следующего кода? Как помощники по выбору обрабатывают верхний и нижний регистры по умолчанию? Как вы можете изменить это значение по умолчанию?

    ```{r}
    flights |> select(contains("TIME"))
    ```

6.  Переименуйте `air_time` в `air_time_min` для обозначения единиц измерения и переместите его в начало фрейма данных.

    ```{r}
    flights %>% 
      rename(air_time_min = air_time) %>% 
      relocate(air_time_min)
    ```

## **4.4 Канал (the pipe)**

Мы показали вам простые примеры канала выше, но его реальная сила проявляется, когда вы начинаете комбинировать несколько глаголов. Например, представьте, что вы хотели найти быстрые рейсы в аэропорт IAH в Хьюстоне: вам нужно объединить [`filter()`](https://dplyr.tidyverse.org/reference/filter.html), [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html), [`select()`](https://dplyr.tidyverse.org/reference/select.html) и [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html):

```{r}
flights |> 
  filter(dest == "IAH") |> 
  mutate(speed = distance / air_time * 60) |> 
  select(year:day, dep_time, carrier, flight, speed) |> 
  arrange(desc(speed))
```

Несмотря на то, что этот конвейер состоит из четырех этапов, его легко просмотреть, потому что глаголы появляются в начале каждой строки: начните с `flights` данных, затем фильтруйте, затем изменяйте, затем выбирайте, затем упорядочивайте.

## **4.5 Группы**

На данный момент вы узнали о функциях, которые работают со строками и столбцами. dplyr становится еще мощнее, когда вы добавляете возможность работы с группами. В этом разделе мы сосредоточимся на наиболее важных функциях: [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html), [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html) и семействе функций slice.

### **4.5.1 `group_by()`**

Используйте [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) для разделения вашего набора данных на группы, значимые для вашего анализа:

```{r}
flights |> 
  group_by(month)
```

[`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) данные не изменяются, но, если вы внимательно посмотрите на выходные данные, вы заметите, что выходные данные указывают на то, что они "сгруппированы по"месяцам (`Groups: month [12]`). Это означает, что последующие операции теперь будут выполняться "по месяцам". [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) добавляет этот сгруппированный признак (называемый классом) во фрейм данных, который изменяет поведение последующих глаголов, применяемых к данным.

### **4.5.2 `summarize()`**

Наиболее важной операцией группировки является сводка, которая, если используется для вычисления одной сводной статистики, сокращает фрейм данных до одной строки для каждой группы. В dplyr эта операция выполняется с помощью `summarize()`, как показано в следующем примере, который вычисляет среднюю задержку отправления по месяцам:

```{r}
flights |> 
  group_by(month) |> 
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE)
  )
```

Вы можете создать любое количество сводок за один вызов [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html). В следующих главах вы познакомитесь с различными полезными сводками, но одна очень полезная сводка - это [`n()`](https://dplyr.tidyverse.org/reference/context.html), которая возвращает количество строк в каждой группе:

```{r}
flights |> 
  group_by(month) |> 
  summarize(
    delay = mean(dep_delay, na.rm = TRUE), 
    n = n()
  )
```

Средства и подсчеты могут помочь вам пройти удивительно долгий путь в науке о данных!

### **4.5.3 `slice_` функции**

Существует пять удобных функций, которые позволяют извлекать определенные строки внутри каждой группы:

-   `df |> slice_head(n = 1)` используется первая строка из каждой группы.

-   `df |> slice_tail(n = 1)` занимает последнюю строку в каждой группе.

-   `df |> slice_min(x, n = 1)` принимает строку с наименьшим значением столбца `x`.

-   `df |> slice_max(x, n = 1)` принимает строку с наибольшим значением столбца `x`.

-   `df |> slice_sample(n = 1)` используется одна случайная строка.

Вы можете изменить `n`, чтобы выбрать более одной строки, или вместо этого `n =` вы можете использовать `prop = 0.1` для выбора (например) 10% строк в каждой группе. Например, следующий код позволяет найти рейсы, которые чаще всего задерживаются по прибытии в каждый пункт назначения:

```{r}
flights |> 
  group_by(dest) |> 
  slice_max(arr_delay, n = 1) |>
  relocate(dest)
```

Обратите внимание, что есть 105 пунктов назначения, но здесь мы получаем 108 строк. В чем дело? [`slice_min()`](https://dplyr.tidyverse.org/reference/slice.html) и [`slice_max()`](https://dplyr.tidyverse.org/reference/slice.html) сохранить привязанные значения, чтобы `n = 1` это означало предоставить нам все строки с наибольшим значением. Если вам нужна ровно одна строка для каждой группы, вы можете задать`with_ties = FALSE`.

Это похоже на вычисление максимальной задержки с помощью [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html), но вы получаете всю соответствующую строку (или строки, если есть связь) вместо отдельной сводной статистики.

### **4.5.4 Группировка по нескольким переменным**

Вы можете создавать группы, используя более одной переменной. Например, мы могли бы создать группу для каждой даты.

```{r}
daily <- flights |>  
  group_by(year, month, day)
daily
```

Когда вы суммируете данные, сгруппированные по нескольким переменным, каждая сводка отслаивается от последней группы. Оглядываясь назад, это был не лучший способ заставить эту функцию работать, но ее трудно изменить, не нарушая существующий код. Чтобы было понятно, что происходит, dplyr отображает сообщение, в котором рассказывается, как вы можете изменить это поведение:

Если вас устраивает такое поведение, вы можете явно запросить его, чтобы подавить сообщение:

```{r}
daily_flights <- daily |> 
  summarize(
    n = n(), 
    .groups = "drop_last"
  )
```

В качестве альтернативы, измените поведение по умолчанию, установив другое значение, например, `"drop"` для удаления всех группировок или `"keep"` для сохранения тех же групп.

### **4.5.5 Разгруппировка**

Вы также можете захотеть удалить группировку из фрейма данных без использования [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html). Вы можете сделать это с помощью [`ungroup()`](https://dplyr.tidyverse.org/reference/group_by.html).

```{r}
daily |> 
  ungroup()
```

Теперь давайте посмотрим, что происходит, когда вы суммируете негруппированный фрейм данных.

```{r}
daily |> 
  ungroup() |>
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE), 
    flights = n()
  )
```

Вы получаете обратно одну строку, потому что dplyr обрабатывает все строки в негруппированном фрейме данных как принадлежащие к одной группе.

### **4.5.6 `.by`**

dplyr 1.1.0 включает в себя новый, экспериментальный синтаксис для группировки по операциям, `.by` аргумент. [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) и [`ungroup()`](https://dplyr.tidyverse.org/reference/group_by.html) никуда не денутся, но теперь вы также можете использовать `.by` аргумент для группировки в рамках одной операции:

```{r}
flights |> 
  summarize(
    delay = mean(dep_delay, na.rm = TRUE), 
    n = n(),
    .by = month
  )
```

Или, если вы хотите сгруппировать по нескольким переменным:

```{r}
flights |> 
  summarize(
    delay = mean(dep_delay, na.rm = TRUE), 
    n = n(),
    .by = c(origin, dest)
  )
```

`.by` работает со всеми глаголами и имеет то преимущество, что вам не нужно использовать `.groups` аргумент для подавления группирующего сообщения или [`ungroup()`](https://dplyr.tidyverse.org/reference/group_by.html) когда вы закончите.

Мы не фокусировались на этом синтаксисе в этой главе, потому что он был очень новым, когда мы писали книгу. Мы хотели упомянуть о нем, потому что считаем, что он многообещающий и, вероятно, будет довольно популярным. Вы можете узнать больше об этом в [сообщении в блоге dplyr 1.1.0](https://www.tidyverse.org/blog/2023/02/dplyr-1-1-0-per-operation-grouping/).

## **4.6 Тематическое исследование: агрегированные данные и размер выборки**

Всякий раз, когда вы выполняете какую-либо агрегацию, всегда полезно включать количество ([`n()`](https://dplyr.tidyverse.org/reference/context.html)). Таким образом, вы можете быть уверены, что не делаете выводов на основе очень небольших объемов данных. Мы продемонстрируем это на примере некоторых бейсбольных данных из пакета **Lahman**. В частности, мы сравним, сколько раз игрок получает удар (`H`) по сравнению с количеством попыток ввести мяч в игру (`AB`):

```{r}
library(Lahman)
batters <- Lahman::Batting |> 
  group_by(playerID) |> 
  summarize(
    performance = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
    n = sum(AB, na.rm = TRUE)
  )
batters
```

Когда мы сопоставляем мастерство отбивающего (измеряемое средним показателем отбивания, `performance`) с количеством возможностей отбить мяч (измеряемое временем подачи биты, `n`), вы видите две закономерности:

1.  Разница в `performance` больше среди игроков с меньшим количеством ударов битой. Форма этого графика очень характерна: всякий раз, когда вы строите среднее значение (или другую сводную статистику) в зависимости от размера группы, вы увидите, что отклонение уменьшается по мере увеличения размера выборки.

2.  Существует положительная корреляция между мастерством (`performance`) и возможностями отбивать мяч (`n`), потому что команды хотят предоставить своим лучшим отбивающим как можно больше возможностей отбивать мяч.

```{r}
batters |> 
  filter(n > 100) |> 
  ggplot(aes(x = n, y = performance)) +
  geom_point(alpha = 1 / 10) + 
  geom_smooth(se = FALSE)+
  theme_minimal()
```

Обратите внимание на удобный шаблон для объединения ggplot2 и dplyr. Вам просто нужно не забыть переключиться с `|>` обработки набора данных на `+` добавление слоев к вашему графику.

Это также имеет важные последствия для ранжирования. Если вы наивно отсортируете `desc(performance)`, то люди с лучшими средними показателями отбивания, очевидно, те, кто пытался ввести мяч в игру очень мало раз и случайно получил удар, они не обязательно самые опытные игроки:

```{r}
batters |> 
  arrange(desc(performance))
```

Вы можете найти хорошее объяснение этой проблемы и способов ее решения в [http://varianceexplained.org/r/empirical_bayes_baseball /](http://varianceexplained.org/r/empirical_bayes_baseball/) и <https://www.evanmiller.org/how-not-to-sort-by-average-rating.html>.

## **4.7 Краткое содержание**

В этой главе вы познакомились с инструментами, которые предоставляет dplyr для работы с фреймами данных. Инструменты грубо сгруппированы в три категории: те, которые управляют строками (например, [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) и [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html), те, которые управляют столбцами (например, [`select()`](https://dplyr.tidyverse.org/reference/select.html) и [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html)), и те, которые управляют группами (например, [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) и [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html)). В этой главе мы сосредоточились на этих инструментах "всего фрейма данных", но вы еще мало узнали о том, что можно сделать с отдельной переменной. Мы вернемся к этому в части книги, посвященной преобразованию, где в каждой главе будут предоставлены инструменты для определенного типа переменной.

В следующей главе мы вернемся к рабочему процессу, чтобы обсудить важность стиля кода, обеспечения хорошей организации вашего кода, чтобы вам и другим было легко читать и понимать ваш код.

### ***Sample*** **Пример работы с функциями dplyr ( df из DB)**

```{r}
library(readr)
library(readxl)
library(readr)
n5521 <- read_csv("C:/Users/user/Desktop/R/Books/1. R4DS/part4_dplyr/n5521.csv", 
     col_types = cols(ID = col_number(), conc = col_number(), 
         RLU = col_number(), lot = col_number(), 
         date = col_date(format = "%m/%d/%Y"), 
         time = col_time(format = "%H:%M:%S")))
n5521
```

```{r}
library(tidyverse)
sorted_N55 <- n5521 %>%
  mutate(number = 1, .before = 1) %>% 
  group_by(test,date) %>% 
  summarise(total = sum(number), n = n()) %>% 
  arrange(date)
sorted_N55 <- sorted_N55 %>% filter(test == "DHS")
```

```{r}
sorted_N55 %>% ggplot(aes(x = date, y = total))+
  geom_line()+
  geom_point()
```

```{r}
sorted_N55 %>% ggplot(aes(x = total))+
  geom_boxplot(fill = "darkgreen", alpha = 0.6)
```

```{r}
summary(sorted_N55$total)
```

```{r}
sorted_N55 %>% ggplot(aes(x = total))+
  geom_histogram(fill = "darkgreen", alpha = 0.6)
```

```{r}
sorted_N55 %>% ggplot(aes(x = total))+
  geom_density(fill = "darkgreen", alpha = 0.6)
```

```{r}
n5521 %>% group_by(test,date) %>%
  filter(test %in% c('AF', 'CAL', 'DHS','ECP', 'HCG', 'HVG', 'PAA')) %>% 
  mutate(n = 1, .before = 1) %>% 
  summarise(tot = sum(n)) %>% 
  arrange(date,tot) %>% ggplot(aes(x = test, y = tot, fill = test))+
  geom_boxplot()+
  scale_y_continuous(trans = 'log2')
```
